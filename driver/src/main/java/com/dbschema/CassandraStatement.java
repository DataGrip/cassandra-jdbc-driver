package com.dbschema;

import com.datastax.driver.core.*;
import com.datastax.driver.core.exceptions.SyntaxError;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLSyntaxErrorException;

public class CassandraStatement extends CassandraBaseStatement {
    private final ConsistencyLevel consistencyLevel;

    CassandraStatement(Session session, ConsistencyLevel consistencyLevel) {
        super(session);
        this.consistencyLevel = consistencyLevel;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        checkClosed();
        try {
            result = new CassandraResultSet(this, execute(sql, consistencyLevel));
            return result;
        } catch (SyntaxError ex) {
            throw new SQLSyntaxErrorException(ex.getMessage(), ex);
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    private com.datastax.driver.core.ResultSet execute(String sql, ConsistencyLevel consistencyLevel) {
        Statement statement = new SimpleStatement(sql).setConsistencyLevel(consistencyLevel);
        return session.execute(statement);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        checkClosed();
        try {
            result = new CassandraResultSet(this, execute(sql, consistencyLevel));
            if (result.isQuery()) {
                throw new SQLException("Not an update statement");
            }
            return 1;
        } catch (SyntaxError ex) {
            throw new SQLSyntaxErrorException(ex.getMessage(), ex);
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        checkClosed();
        try {
            return executeInner(execute(sql, consistencyLevel), true);
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        checkClosed();
        return result;
    }

    @Override
    public void addBatch(String sql) {
        if (batchStatement == null) {
            batchStatement = new BatchStatement();
            batchStatement.setConsistencyLevel(consistencyLevel);
        }
        SimpleStatement statement = new SimpleStatement(sql);
        statement.setConsistencyLevel(consistencyLevel);
        batchStatement.add(statement);
    }

    @Override
    public void clearBatch() {
        batchStatement = null;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }
}
