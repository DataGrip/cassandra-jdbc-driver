package com.dbschema;

import com.datastax.driver.core.*;
import com.datastax.driver.core.exceptions.SyntaxError;
import com.dbschema.StatementExecutor.GetConsistencyLevelExecutor;
import com.dbschema.StatementExecutor.SetConsistencyLevelExecutor;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLSyntaxErrorException;
import java.util.ArrayList;
import java.util.List;

public class CassandraStatement extends CassandraBaseStatement {
    private static final List<StatementExecutor> EXECUTORS = new ArrayList<>();

    static {
        EXECUTORS.add(SetConsistencyLevelExecutor.INSTANCE);
        EXECUTORS.add(GetConsistencyLevelExecutor.INSTANCE);
    }

    private final ConsistencyLevel consistencyLevel;
    private final CassandraConnection connection;

    CassandraStatement(Session session, ConsistencyLevel consistencyLevel, CassandraConnection connection) {
        super(session);
        this.consistencyLevel = consistencyLevel;
        this.connection = connection;
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        checkClosed();
        try {
            this.result = new CassandraResultSet(this, execute(sql, consistencyLevel));
            return this.result;
        } catch (SyntaxError ex) {
            throw new SQLSyntaxErrorException(ex.getMessage(), ex);
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    private com.datastax.driver.core.ResultSet execute(String sql, ConsistencyLevel consistencyLevel) {
        Statement statement = new SimpleStatement(sql).setConsistencyLevel(consistencyLevel);
        return session.execute(statement);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        checkClosed();
        try {
            CassandraResultSet cassandraResultSet = new CassandraResultSet(this, execute(sql, consistencyLevel));
            if (cassandraResultSet.isQuery()) {
                this.result = null;
                throw new SQLException("Not an update statement");
            }
            this.result = cassandraResultSet;
            return 1;
        } catch (SyntaxError ex) {
            throw new SQLSyntaxErrorException(ex.getMessage(), ex);
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        checkClosed();
        try {
            for (StatementExecutor executor : EXECUTORS) {
                StatementExecutor.ExecutionResult result = executor.execute(connection, sql);
                if (result != null) {
                    this.result = result.resultSet;
                    return this.result != null;
                }
            }
            return executeInner(execute(sql, consistencyLevel), true);
        } catch (Throwable t) {
            throw new SQLException(t.getMessage(), t);
        }
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        checkClosed();
        return result;
    }

    @Override
    public void addBatch(String sql) {
        if (batchStatement == null) {
            batchStatement = new BatchStatement();
            batchStatement.setConsistencyLevel(consistencyLevel);
        }
        SimpleStatement statement = new SimpleStatement(sql);
        statement.setConsistencyLevel(consistencyLevel);
        batchStatement.add(statement);
    }

    @Override
    public void clearBatch() {
        batchStatement = null;
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }
}
